class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    def mergeTwoLists(l1, l2):
        dummy = ListNode(0)
        current = dummy

        while l1 and l2:
            if l1.val < l2.val:
                current.next = l1
                l1 = l1.next
            else:
                current.next = l2
                l2 = l2.next
            current = current.next

        current.next = l1 if l1 else l2
        return dummy.next

    if not lists:
        return None

    n = len(lists)
    interval = 1

    while interval < n:
        for i in range(0, n - interval, interval * 2):
            lists[i] = mergeTwoLists(lists[i], lists[i + interval])
        interval *= 2

    return lists[0]

# Example usage:
lists = [[1, 4, 5], [1, 3, 4], [2, 6]]
sorted_list = mergeKLists([ListNode(val) for val in lists])

#priority queue approach:
import heapq

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    heap = []
    for i, lst in enumerate(lists):
        if lst:
            heapq.heappush(heap, (lst.val, i, lst))

    dummy = ListNode(0)
    current = dummy

    while heap:
        _, index, node = heapq.heappop(heap)
        current.next = node
        current = current.next

        if node.next:
            heapq.heappush(heap, (node.next.val, index, node.next))

    return dummy.next

# Example usage:
lists = [[1, 4, 5], [1, 3, 4], [2, 6]]
sorted_list = mergeKLists([ListNode(val) for val in lists])

